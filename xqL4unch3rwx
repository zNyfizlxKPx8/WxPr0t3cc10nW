











local function checkAndLoadScript()
    -- URLs de listas
    local ipListUrl = 'ip list'
    local nameListUrl = 'https://raw.githubusercontent.com/zNyfizlxKPx8/WxPr0t3cc10nW/refs/heads/main/0XN4meL1sTx0'

    -- aquí pones tus 11 raws VIP
    local vipScriptUrls = {
        "URL_DE_TU_RAW1",
        "URL_DE_TU_RAW2",
        "URL_DE_TU_RAW3",
        "URL_DE_TU_RAW4",
        "URL_DE_TU_RAW5",
        "URL_DE_TU_RAW6",
        "URL_DE_TU_RAW7",
        "URL_DE_TU_RAW8",
        "URL_DE_TU_RAW9",
        "URL_DE_TU_RAW10",
        "URL_DE_TU_RAW11"
    }

    -- raw FREE
    local freeScriptUrl = 'https://pastebin.com/raw/g4PYXk4M'

    -- obtener nombre del player
    local function getPlayerName()
        return player:getName() or "Mad Genius"
    end

    -- obtener IP pública
    local function getPublicIp(callback)
        local url = "https://api.ipify.org/?format=json"
        HTTP.get(url, function(data, err)
            if err or not data then
                callback(nil, "No se pudo obtener la IP")
                return
            end

            local ip = nil
            local ok, jsonData = pcall(json.decode, data)
            if ok and jsonData and jsonData.ip then
                ip = jsonData.ip
            end
            if not ip then
                local match4 = data:match("(%d+%.%d+%.%d+%.%d+)")
                if match4 then ip = match4 end
            end
            if not ip then
                local match6 = data:match("([a-fA-F0-9:]+)")
                if match6 then ip = match6 end
            end
            callback(ip, nil)
        end)
    end

    -- verificar si está en la lista
    local function checkInList(value, url, isIp)
        return function(callback)
            HTTP.get(url, function(content, err)
                if err or not content then
                    print("ERROR: No se pudo verificar")
                    callback(false)
                    return
                end
                local pattern
                if isIp and value:match(":") then
                    pattern = "%f[%w:]"..value:gsub("%.", "%%.").."%f[%W]"
                elseif isIp then
                    pattern = "%f[%d]"..value:gsub("%.", "%%.").."%f[%D]"
                else
                    pattern = "%f[%a]"..value.."%f[%A]"
                end
                callback(content:find(pattern) ~= nil)
            end)
        end
    end

    -- cargar scripts desde URL
    local function loadScriptFromUrl(url)
        HTTP.get(url, function(scriptContent, err)
            if err or not scriptContent then return end
            local loadedFunction, loadError = loadstring(scriptContent)
            if not loadedFunction then return end
            local success, execError = pcall(loadedFunction)
            if not success then
                -- print("Error al ejecutar script:", execError)
            end
        end)
    end

    -- decidir qué cargar
    local function loadAppropriateScripts(isVip)
        if isVip then
            -- cargar TODOS los VIP
            for _, url in ipairs(vipScriptUrls) do
                loadScriptFromUrl(url)
            end
        else
            -- cargar solo el FREE
            loadScriptFromUrl(freeScriptUrl)
        end
    end

    -- ejecución principal
    getPublicIp(function(ip, error)
        local charName = getPlayerName()

        if error or not ip then
            checkInList(charName, nameListUrl, false)(function(nameIsVip)
                loadAppropriateScripts(nameIsVip)
            end)
            return
        end

        checkInList(ip, ipListUrl, true)(function(ipIsVip)
            checkInList(charName, nameListUrl, false)(function(nameIsVip)
                local isVip = ipIsVip or nameIsVip
                loadAppropriateScripts(isVip)
            end)
        end)
    end)
end

checkAndLoadScript()

































